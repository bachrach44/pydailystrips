import sys, getopt, time, urllib2, re, argparse

outfile = ""

def classType(name, data, cl):
	artist = getArtist(data)
	#handle vars in class def
	for val in data:
		if ("$" in val):
			for v in cl:
				cl[v] = str.replace(cl[v], val, data[val])
	for v in cl:
		if ("$" in cl[v]):
			for val in data:
				cl[v] = str.replace(cl[v], "$"+val, data[val])
	return stripType(name, cl)
	
def getArtist(data):
	if ('artist' in data):
		return data['artist']
	else:
		return ""

def stripType(name, data):
	#add in homepage later
	artist = getArtist(data)
	html = "<b>"+str(data.get('name'))+"</b> by "+artist+"<br /><br />\n"
	if (data['type'].startswith('search')):
		url = data.get('homepage')
		if (data.get('baseurl')):
			url = data.get('baseurl')
		request = urllib2.Request(url)
		request.add_header("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36") 
		request.add_header("Accept", "text/html")
		resp = urllib2.urlopen(request)
		page = resp.read()
		pattern = re.compile(data.get('searchpattern'))
		if (pattern.search(page)):
			html += "<img src=\""
			matches = pattern.findall(page)
			if (data.get('baseurl')):
				html += str(data.get('baseurl'))+matches[0]
			else:
				html += str(matches[0])
			html += "\" /><br /><br />\n\n"
		else:
			html += "Couldn't find regex in page<br /><br />\n"
	elif (data['type'].startswith('generate')):
		image = data['imageurl']
		image = str.replace(image, "%Y",time.strftime("%Y"))
		image = str.replace(image, "%y",time.strftime("%y"))
		image = str.replace(image, "%m",time.strftime("%m"))
		image = str.replace(image, "%d",time.strftime("%d"))
		html += "<img src=\""+image+"\" /><br />\n\n"
	else:
		return html+"Say what? Couldn't understand the strip type<br />\n"
	return html

def getStrips(toget, strips):
	for s in toget:
		if (s in strips):
			strip = strips.get(s)
			if ('useclass' in strip):
				html = classType(s, strip, strips.get(strip['useclass']))
			elif('type' in strip):
				html = stripType(s, strip)
			else:
				html = "could not understand strip definition.<br />\n\n"		
			with open(outfile, "a") as myfile:
				myfile.write(html)
		else:
			with open(outfile, "a") as myfile:
				myfile.write('Could not find strip %s in strips.def file<br />\n\n' %(s))

def init():
	strips = {}
	with open("strips.def", "r") as defs:
		strip = {}
		title = ''
    		for line in defs:
			line = line.strip()
			if (not line):
				continue
			if (line.startswith('#')):
				continue
			if (line.startswith("end")):
				strips[title] = strip
				strip = {}
				title=''
				continue
			if (line.startswith("strip")):
				id, name = line.split(" ", 1)
				title = name
				#print "strip begin "+strip['name']
				strip['strip'] = name
			elif (line.startswith("class")):
				id, call = line.split(" ", 1)
				title = call
			else:
				prop, val = line.split(" ", 1)
				strip[prop] = val
	return strips

def printFooter():
	with open(outfile, "a") as myfile:
		myfile.write("generated at "+time.asctime(time.localtime(time.time()))+"<br />\n")
		myfile.write("powered by <a href=\"https://github.com/bachrach44/pydailystrips\">py daily strips</a>\n</body></html>\n")

def printHeader():
	with open(outfile, "w") as myfile:
		myfile.write("<html><head><title>Python Daily Strips</title></head>\n<body><b>Python Daily Strips</b><br />\n\n")

def loadFromFile(filename):
	with open (filename, "r") as myfile:
		text = myfile.read()
	return text.split()

def main(argv):
	#will call app with list of strips and possible opts
	#process some options (output, input)
	infile = ""
	global outfile
	outfile = "index.html"
	parser = argparse.ArgumentParser()
	parser.add_argument("-o", "--output", help="output file to write to")
	parser.add_argument("-i", "--input", help="input file to read from")
	parser.add_argument("-v", "--version", help="print version and exit", action="store_true")
	parser.add_argument("strips", metavar='strips', nargs='?', help='strips to load, separated by spaces')
	args = parser.parse_args()
	if (args.version):
		print "Are you kidding? This isn't even beta. What are you even doing looking at this?"
		exit(0)
	if (args.input):
		print "in"
    		infile = args.input
	if (args.output):
		print "out"
		outfile = args.output
	#load classes from def file
	strips = init()

	toget = []
	if (infile):
		#load toget from infile
		toget = loadFromFile(infile)

	else:
		#load toget from command line
		toget = args.strips.split()

	printHeader()
	getStrips(toget, strips)
	printFooter()

main(sys.argv)

#other options I should consider supporting (from dailystrips)
#   quiet|q  verbose   local|l   noindex   archive|a   dailydir|d   stripdir   save|s
#   nostale   date=s   new|n   defs=s   nopersonal   basedir=s   list   proxy=s
#   proxyauth=s   noenvproxy   nospaces   useragent=s   random   nosystem   stripnav
#   nosymlinks   titles=s   retries=s   clean=s   updates=s   noupdates
#
#Options supported by dailystrips that I have no plan on supporting
#avantgo, lite





